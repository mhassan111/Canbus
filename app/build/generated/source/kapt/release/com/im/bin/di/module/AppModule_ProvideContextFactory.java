// Generated by Dagger (https://dagger.dev).
package com.im.bin.di.module;

import android.app.Application;
import android.content.Context;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideContextFactory implements Factory<Context> {
  private final Provider<Application> applicationProvider;

  public AppModule_ProvideContextFactory(Provider<Application> applicationProvider) {
    this.applicationProvider = applicationProvider;
  }

  @Override
  public Context get() {
    return provideContext(applicationProvider.get());
  }

  public static AppModule_ProvideContextFactory create(Provider<Application> applicationProvider) {
    return new AppModule_ProvideContextFactory(applicationProvider);
  }

  public static Context provideContext(Application application) {
    return Preconditions.checkNotNull(AppModule.provideContext(application), "Cannot return null from a non-@Nullable @Provides method");
  }
}
