// Generated by Dagger (https://dagger.dev).
package com.im.bin.di.module;

import com.im.bin.firebase.FirebaseSource;
import com.im.bin.firebase.FirebaseSourceImpl;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideFirebaseSourceFactory implements Factory<FirebaseSource> {
  private final Provider<FirebaseSourceImpl> firebaseSourceImplProvider;

  public AppModule_ProvideFirebaseSourceFactory(
      Provider<FirebaseSourceImpl> firebaseSourceImplProvider) {
    this.firebaseSourceImplProvider = firebaseSourceImplProvider;
  }

  @Override
  public FirebaseSource get() {
    return provideFirebaseSource(firebaseSourceImplProvider.get());
  }

  public static AppModule_ProvideFirebaseSourceFactory create(
      Provider<FirebaseSourceImpl> firebaseSourceImplProvider) {
    return new AppModule_ProvideFirebaseSourceFactory(firebaseSourceImplProvider);
  }

  public static FirebaseSource provideFirebaseSource(FirebaseSourceImpl firebaseSourceImpl) {
    return Preconditions.checkNotNull(AppModule.provideFirebaseSource(firebaseSourceImpl), "Cannot return null from a non-@Nullable @Provides method");
  }
}
