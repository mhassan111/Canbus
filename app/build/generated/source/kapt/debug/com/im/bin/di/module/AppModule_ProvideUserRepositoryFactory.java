// Generated by Dagger (https://dagger.dev).
package com.im.bin.di.module;

import com.im.bin.respository.UserRepository;
import com.im.bin.respository.UserRepositoryImpl;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideUserRepositoryFactory implements Factory<UserRepository> {
  private final Provider<UserRepositoryImpl> userRepositoryImplProvider;

  public AppModule_ProvideUserRepositoryFactory(
      Provider<UserRepositoryImpl> userRepositoryImplProvider) {
    this.userRepositoryImplProvider = userRepositoryImplProvider;
  }

  @Override
  public UserRepository get() {
    return provideUserRepository(userRepositoryImplProvider.get());
  }

  public static AppModule_ProvideUserRepositoryFactory create(
      Provider<UserRepositoryImpl> userRepositoryImplProvider) {
    return new AppModule_ProvideUserRepositoryFactory(userRepositoryImplProvider);
  }

  public static UserRepository provideUserRepository(UserRepositoryImpl userRepositoryImpl) {
    return Preconditions.checkNotNull(AppModule.provideUserRepository(userRepositoryImpl), "Cannot return null from a non-@Nullable @Provides method");
  }
}
