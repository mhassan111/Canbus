// Generated by Dagger (https://dagger.dev).
package com.im.bin.di.module;

import com.im.bin.respository.DatabaseRepository;
import com.im.bin.respository.DatabaseRepositoryImpl;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideDatabaseRepositoryFactory implements Factory<DatabaseRepository> {
  private final Provider<DatabaseRepositoryImpl> databaseRepositoryImplProvider;

  public AppModule_ProvideDatabaseRepositoryFactory(
      Provider<DatabaseRepositoryImpl> databaseRepositoryImplProvider) {
    this.databaseRepositoryImplProvider = databaseRepositoryImplProvider;
  }

  @Override
  public DatabaseRepository get() {
    return provideDatabaseRepository(databaseRepositoryImplProvider.get());
  }

  public static AppModule_ProvideDatabaseRepositoryFactory create(
      Provider<DatabaseRepositoryImpl> databaseRepositoryImplProvider) {
    return new AppModule_ProvideDatabaseRepositoryFactory(databaseRepositoryImplProvider);
  }

  public static DatabaseRepository provideDatabaseRepository(
      DatabaseRepositoryImpl databaseRepositoryImpl) {
    return Preconditions.checkNotNull(AppModule.provideDatabaseRepository(databaseRepositoryImpl), "Cannot return null from a non-@Nullable @Provides method");
  }
}
