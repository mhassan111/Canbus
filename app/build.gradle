plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'dagger.hilt.android.plugin'
    id 'com.google.devtools.ksp' version '1.6.10-1.0.2'
}

kotlin {
    sourceSets {
        debug {
            kotlin.srcDir("build/generated/ksp/debug/kotlin")
        }
        release {
            kotlin.srcDir("build/generated/ksp/release/kotlin")
        }
    }
}

import com.screening.app.buildsrc.Libs
import com.screening.app.buildsrc.ConfigData

android {
    signingConfigs {
        release {
            storeFile file('/Users/hassan/Desktop/MacHome/Call-Sms-Screening/project/Keystore')
            storePassword 'screening12'
            keyAlias 'screeningKey'
            keyPassword 'screening12'
        }
    }
    compileSdk ConfigData.compileSdkVersion

    if (project.hasProperty("devBuild")) {
        splits.abi.enable = false
        splits.abi.density = false
        apptOptions.cruncherEnabled = false
    }

    defaultConfig {
        applicationId "com.screening.app"
        minSdk ConfigData.minSdkVersion
        targetSdk ConfigData.targetSdkVersion
        versionCode ConfigData.versionCode
        versionName ConfigData.versionName
        resConfigs "en", "xxhdpi"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            ext.alwaysUpdateBuildId = false
            ext.enableCrashlytics = false
        }
        release {
            minifyEnabled false
            crunchPngs false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

//    flavorDimensions "stage"
//    productFlavors {
//        // When building a variant that uses this flavor, the following configurations
//        // override those in the defaultConfig block.
//        dev {
//            dimension "stage"
//            // To avoid using legacy multidex when building from the command line,
//            // set minSdkVersion to 21 or higher. When using Android Studio 2.3 or higher,
//            // the build automatically avoids legacy multidex when deploying to a device running
//            // API level 21 or higherâ€”regardless of what you set as your minSdkVersion.
//            resConfigs "en", "xxhdpi"
//        }
//
//        prod {
//            dimension "stage"
//            // If you've configured the defaultConfig block for the release version of
//            // your app, you can leave this block empty and Gradle uses configurations in
//            // the defaultConfig block instead. You still need to create this flavor.
//            // Otherwise, all variants use the "dev" flavor configurations.
//        }
//    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true

        // Disable unused AGP features
        buildConfig false
        aidl false
        renderScript false
        resValues false
        shaders false
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.1.0-rc03' // For Kotlin 1.6.10. Revert with rc03.
    }
//    composeOptions {
//        kotlinCompilerExtensionVersion Libs.AndroidX.Compose.compose_version
//    }
    packagingOptions {
        exclude "META-INF/licenses/**"
        exclude "META-INF/AL2.0"
        exclude "META-INF/LGPL2.1"
    }
}

dependencies {

    // Kotlin
    implementation Libs.Kotlin.stdlib
    implementation Libs.Kotlin.kts

    // Android Support Lib
    implementation Libs.AndroidX.coreKtx
    implementation Libs.AndroidX.runtimeKtx
    implementation Libs.AndroidX.appCompat
    implementation Libs.AndroidX.material
    implementation Libs.AndroidX.constraintLayout

    // Compose
    implementation Libs.AndroidX.Compose.ui
    implementation Libs.AndroidX.Compose.material
    implementation Libs.AndroidX.Compose.tooling
    implementation Libs.AndroidX.Compose.iconsExtended
    implementation Libs.AndroidX.Compose.viewModel
    implementation Libs.AndroidX.Compose.runtime
    implementation Libs.AndroidX.Compose.activity
    implementation Libs.AndroidX.Compose.navigation
    implementation Libs.AndroidX.Compose.foundation
    implementation Libs.Accompanist.permissions
    implementation Libs.Hilt.navigationCompose
    implementation Libs.Accompanist.systemUiController

    // Coroutines
    implementation Libs.Coroutines.core
    implementation Libs.Coroutines.android

    //Dagger - Hilt
    implementation Libs.Hilt.dagger_hilt_android
    kapt Libs.Hilt.hilt_android_compiler
    implementation Libs.Hilt.hilt_view_model
    kapt Libs.Hilt.hilt_compiler

    // Room
    implementation Libs.Room.room_runtime
    kapt Libs.Room.room_compiler
    implementation Libs.Room.coroutine_support

    // Firebase
    implementation Libs.Firebase.firebase_crashlytics
    implementation Libs.Firebase.firebase_analytics
    implementation Libs.Firebase.firebase_messaging
    implementation Libs.Firebase.firebase_firestore
    implementation Libs.Firebase.firebase_auth

    // Retrofit
    implementation Libs.Retrofit.retrofit
    implementation Libs.Retrofit.gson_converter
    implementation Libs.Retrofit.logging_interceptor
    implementation Libs.Retrofit.rxjava_adapter

    // Okhttp
    implementation Libs.Okhttp.ok_http

    // LibPhone
    implementation Libs.LibPhone.libPhoneNumber

    // Testing
    testImplementation Libs.Test.junit
    androidTestImplementation Libs.Test.extJunit
    androidTestImplementation Libs.Test.espressoCore
    androidTestImplementation Libs.Test.composeUiTest
    debugImplementation Libs.Test.composeToolingTest

    // Compose Destination Library
//    implementation Libs.AndroidX.Compose.Library.raamcosta_compose_detination
//    ksp Libs.AndroidX.Compose.Library.raamcosta_ksp

}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.firebase.crashlytics'